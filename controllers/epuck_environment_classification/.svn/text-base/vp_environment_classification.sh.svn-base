source utils.sh 

###################################################################
# Problem parameters                                              #
###################################################################
# ARGOS TEMPLATE
# Parameters of <experiment>
SWARMSIZE=1
length=( 0 )  		      # In seconds
randomSeed=$RANDOM

# Parameters shared from <controller> and <loop_function>
g=0              	      # Parameter for the mean of the exponential distribution for the dissemination state
sigma=1 #(15 20 25 30 35 40 45)
 #"1" "2" "3" "4" "5" "6" "7" "8" "9" "10"
	#1"15" "20" "25" "30" "35" "40" "45" "50"
	#1"100" "150" "200" "250" "300" "350" "400" "450" "500")
	  
#, 50,  100, 150, 200, 250, 300, 350, 400, 450, 500) 		      # Parameter for the mean of the exponential distribution for the exploration state
runs=1        		      # Number of runs
decisionRule=3                # Decision rule
radix=""      		      # Radix for the file names
set=0
# Parameters of <loop_function>
nRedCells=400    	      # For set cell colors without using percentage
nGreenCells=0 		      # For set cell colors without using percentage
nBlueCells=0   		      # For set cell colors without using percentage
usingPercentage=true          # Flag to decide if use or not percentage in cell colors attribution
percentageRed=66   	      # Percentage of red cells
percentageBlue=34  	      # Percentage of blue cells
percentageGreen=0  	      # Percentage of green cells
saveEveryStep=10   	      # Interval of catching statistics
saveEveryTicksStatistic=false # File with every tick statistics
saveEveryRunStatistics=true   # File with every run statistics
saveEveryRobotStatistics=true  # ATTENZIONE!!!! QUESTO FLAG ANCHE PER DECIDERE COME TERMINARE  File with statistics catched by every robot	
saveEveryQualityFile=false     # File where every robot writes his quality after every diffusing stae
globalStatisticsFile=false    # File whit overall statistics
initialReds=0	              # Number of robots with initial opinion red
initialGreens=0		      # Number of robots with initial opinion green
initialBlues=0		      # Number of robots with initial opinion blue
lamda=100                     # Lamda param (Parameter to go straight in the random walk: Exponential distribution mean)
turn=45                       # Turn param (Parameter to turn in the random walk: Uniform distribution mean)
lengthOfOneRun=0
numberOfQualities=10

###################################################################
# Script constants                                                #
###################################################################
USER_NAME=`whoami`
TMP1=`mktemp`
TMP2=`mktemp`
WORKDIR="/tmp/$USER_NAME/"

###################################################################
# launcher.sh configuration constants                             #
##################################################################
# EXPORTARGOS (0 --> TRUE, !=0 --> FALSE)
export_argos=0
# QUEUE_TYPE ("any" --> ANY, coda1 = "#$ -l opteron6272", coda2 = "#$ -l xeon5410, coda3 = "#$ -l opteron6128", coda4 = "#$ -l opteron6272")
#queue_type="#$ -l opteron2216"

#queue_type="#$ -l xeon5410"

queue_type="any"
#queue_type="#$ -l opteron6128"

#queue_type="#$ -l opteron6272"

# DIR_PREFIX
dirprefix="exp-check-qualSimplesingoli"
# RESULTSDIR (final destination of the results files of the job)
resultsdir="/lustre/home/$USER_NAME/working/$dirprefix-results/"
# JOBDIR (final destination of the .err and .out files of the job)
jobdir="/lustre/home/$USER_NAME/working/$dirprefix-job_outputs/"
# SCRIPTSDIR (final destination of the script of the job)
scriptsdir="/lustre/home/$USER_NAME/working/$dirprefix-scripts/"
# THECOMMAND
argos_template="/lustre/home/$USER_NAME/svn/Epuck/experiments/c_epuck_environment_classification.argos"
command="/lustre/home/$USER_NAME/argos3-dist/bin/argos3"

# JOBPREFIX
job_prefix="exp-check-qualSimplesingoli"
# Counter for the jobs
jobcounter=1

###################################################################
# The actual script                                               #
###################################################################

# Making working directory
mkdir -p $WORKDIR

# Making results directory
mkdir -p $resultsdir

# Making scripts directory
mkdir -p $scriptsdir

# Making job_outputs directory
mkdir -p $jobdir

#for((max=1;max<=2;max++)); do

 #for ((i=32;i<=33;i++)); do   # SWARMSIZE

 #for((dr=1;dr<=3;dr++)); do    # decision rule
 #for((ss=0;ss<=1;ss++)); do #colore: rosso e blu
 for((col=0; col<=1; col++)); do
 # for((s=0; s<=2; s++)); do # initial reds
   for((k=1;k<=100;k++)); do      # set 
     for((dr=1;dr<=20;dr++)); do
      ###################################################################
      # Configure the script parameters                                 #
      ###################################################################



 SWARMSIZE=1
      sed -e "s/SWARM_SIZE/$SWARMSIZE/g" $argos_template > $TMP1

      # MAXTIME
      sed -e "s/LENGTH/$length/g" $TMP1 > $TMP2

      # random seed
      randomSeed=$RANDOM
      sed -e "s/SEED/$randomSeed/g" $TMP2 > $TMP1

      # g_attribute
      sed -e "s/G_ATTR/$g/g" $TMP1 > $TMP2

      # sigma
      #sigma=50

       sigma=$((10*$dr))
      #sigma=$((5*$s))
	 
      sed -e "s/SIGMA/$sigma/g" $TMP2 > $TMP1

      # decision rule
      decisionRule=3 #$dr
      sed -e "s/DECISION_RULE/$decisionRule/g" $TMP1 > $TMP2

  
      # Number of red cells if you don't use percentages
      sed -e "s/RED_CELLS/$nRedCells/g" $TMP2 > $TMP1

      # Number of green cells if you don't use percentages
      sed -e "s/GREEN_CELLS/$nGreenCells/g" $TMP1 > $TMP2

      # Number of blue cells if you don't use percentages
      sed -e "s/BLUE_CELLS/$nBlueCells/g" $TMP2 > $TMP1

      # True -> exit for consensous, False -> exit for number of qualities written
      sed -e "s/EXITCOND/$exitTermination/g" $TMP1 > $TMP2

      # Percentage flag
      sed -e "s/NOT_USING_NUMBER/$usingPercentage/g" $TMP1 > $TMP2

      # Red percentage
      #$percentageRed=$((2*$j))
      sed -e "s/P_C_R/$percentageRed/g" $TMP2 > $TMP1

      # Blue percentage
      #$percentageBlue=$((100-$percentageRed))
      sed -e "s/PERCENT_BLUE/$percentageBlue/g" $TMP1 > $TMP2

      # Green percentage
      sed -e "s/VERDE_PROPORTION/$percentageGreen/g" $TMP2 > $TMP1

      # Interval of catching stats
      sed -e "s/INTERVAL_CATCH/$saveEveryStep/g" $TMP1 > $TMP2

      # Every ticks flag
      sed -e "s/TICKS_SAVE/$saveEveryTicksStatistic/g" $TMP2 > $TMP1

      # Every run flag
      sed -e "s/EVERY_RUN/$saveEveryRunStatistics/g" $TMP1 > $TMP2

      # Every robot flag
      sed -e "s/WRITEQ/$saveEveryRobotStatistics/g" $TMP2 > $TMP1
      #sed -e "s/WRITEQ/true/g" $TMP2 > $TMP1
      # Quality file flag
      sed -e "s/QUALITY_FILE/$saveEveryQualityFile/g" $TMP1 > $TMP2

      # Number of initial red opinions
  
	  initialReds=1 #$SWARMSIZE #$(($SWARMSIZE-$initialReds))
      if(($col==0)); then
	initialReds=0
      fi
 
     # if(($s==0)); then
#	initialReds=0
 #     fi

      #initialReds=$(($j*2))
      #initialReds=$j
      sed -e "s/INITIAL_RED_OPINION/$initialReds/g" $TMP2 > $TMP1

      # Number of initial blue opinions
      #initialBlues=$(($j*50))
      #initialBlues=$((100-$(($initialReds))))

      initialBlues=0 #$SWARMSIZE #$(($SWARMSIZE-$initialReds))
      if(($col==0)); then
	initialBlues=1
      fi

      sed -e "s/INITIAL_BLUE_OPINION/$initialBlues/g" $TMP1 > $TMP2

      # Number of initial green opinions
      #initialGreens=$(($j*10)) 
      sed -e "s/INITIAL_gREEN_OPINION/$initialGreens/g" $TMP2 > $TMP1

      # Lamda value
      sed -e "s/LAMDA/$lamda/g" $TMP1 > $TMP2

      # Turn parameter
      sed -e "s/TURN/$turn/g" $TMP2 > $TMP1

      # Number of runs
      sed -e "s/RUNS/$runs/g" $TMP1 > $TMP2

      # Length of a run
      sed -e "s/R_M_L/$lengthOfOneRun/g" $TMP2 > $TMP1

      set=$k

      # RADIX of file names                                                                                                                   
      radix=""
      radix+="N$SWARMSIZE"
      radix+="NRED$initialReds"
      radix+="NBLUE$initialBlues"
      radix+="NGREEN$initialGreens"
      radix+="G$g"
      radix+="SIGMA$sigma"
      radix+="LAMDA$lamda"
      radix+="DR$decisionRule"
      radix+="SET$set"
      sed -e "s/RADIX/$radix/g" $TMP1 > $TMP2

      
      sed -e "s/NUMQUAL/$numberOfQualities/g" $TMP2 > $TMP1

      sed -e "s/ROFLA/$saveOneRobotFlag/g" $TMP1 > $TMP2

      sed -e "s/GLOBALFI/$globalStatisticsFile/g" $TMP2 > $TMP1

      # Set up the list of parameters (only the xml file in this case)
      xml="$scriptsdir"
      xml+="N$SWARMSIZE"
      xml+="NRED$initialReds"
      xml+="NBLUE$initialBlues"
      xml+="NGREEN$initialGreens"
      xml+="G$g"
      xml+="SIGMA$sigma"
      xml+="LAMDA$lamda"
      xml+="DR$decisionRule"
      xml+="SET$set"

      mv $TMP1 $xml
      parameters="-c $xml"

      ###################################################################
      # Configure the launcher.sh script                                #
      ###################################################################
  
      # Set up launcher script
      launcher="$WORKDIR$jobcounter.sh"
      sedlauncher $launcher $jobcounter $USER_NAME $export_argos "$command" $resultsdir $jobdir "$queue_type" $job_prefix

      ###################################################################
      # Submit the job                                                  #
      ###################################################################
      qwait
      qsub $launcher $parameters
      jobcounter=$(echo "$jobcounter + 1" | bc)

      ###################################################################
      # Clean up all the mess                                           #
      ###################################################################
      # Remove tmp files
      rm -f $TMP1 $TMP2 $launcher
       
     done
   done
done
   
