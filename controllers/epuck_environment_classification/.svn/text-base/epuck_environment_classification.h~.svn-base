#ifndef EPUCK_ENVIRONMENT_CLASSIFICATION_H
#define EPUCK_ENVIRONMENT_CLASSIFICATION_H

/*
 * Include some necessary headers.
 */
/* Definition of the CCI_Controller class. */
#include <argos3/core/control_interface/ci_controller.h>
#include <argos3/plugins/robots/e-puck/simulator/epuck_entity.h>
/* Definition of the differential steering actuator */
#include <argos3/plugins/robots/generic/control_interface/ci_differential_steering_actuator.h>
/* Definition of the LEDs actuator */
#include <argos3/plugins/robots/generic/control_interface/ci_leds_actuator.h>
/* Definition of the range and bearing actuator */
#include <argos3/plugins/robots/e-puck/control_interface/ci_epuck_range_and_bearing_actuator.h>
/* Definition of the range and bearing sensor */
#include <argos3/plugins/robots/e-puck/control_interface/ci_epuck_range_and_bearing_sensor.h>
/* Definition of the epuck proximity sensor */
#include <argos3/plugins/robots/e-puck/control_interface/ci_epuck_proximity_sensor.h>
/* Definition of the range and bearing actuator */
#include <argos3/plugins/robots/generic/control_interface/ci_range_and_bearing_actuator.h>
/* Definition of the range and bearing sensor */
#include <argos3/plugins/robots/generic/control_interface/ci_range_and_bearing_sensor.h>
#include <argos3/plugins/robots/generic/control_interface/ci_colored_blob_omnidirectional_camera_sensor.h>
/* Definition of the epuck motor ground sensor */
#include <argos3/plugins/robots/e-puck/control_interface/ci_epuck_ground_sensor.h>
/* Definitions for random number generation */
#include <argos3/core/utility/math/rng.h>
#include <vector>   
#include <set>   
#include <string>   
#include <fstream>
#define N_COL  3
/*
 * All the ARGoS stuff in the 'argos' namespace.
 * With this statement, you save typing argos:: every time.
 */
using namespace argos;
 
class EPuck_Environment_Classification : public CCI_Controller {

public:

  struct CollectedData {
     CColor colore;
     int count;
     int lastCell;
     CollectedData();
  };
  
  struct informationCollected{
     UInt8 receivedOpinion;
     Real receivedQuality;
     UInt8 senderID;
  };
 
  struct Opinion {
     UInt8 actualOpinion;
     UInt8 countedCellOfActualOpinion;
     Real quality;
     CColor actualOpCol;
     Real exportQuality[N_COL];
     Opinion();   
  };

  // Random walk
  struct Movement {
    int walkTime;         // Movement time counter; 
    int actualDirection;  // 0, straight; 1, turn CW; 2, turn CCW (TOCHECK: if 1 is counterclockwise or vice versa; fix comment) 
    Movement();
  };

  struct SimulationState {
     int decision_rule;
     double g;
     double sigma;
     std::string radix;
     void Init(TConfigurationNode& t_node);
  };

  struct SStateData {

     int explorDurationTime; 
     int remainingExplorationTime; 
     int diffusingDurationTime; 
     int remainingDiffusingTime;
     /* Following variables are not used anymore, but could be usefull to have them */
     int exportTime[N_COL];
     int numberOfExplorations[N_COL];
     int numberOfDiffusions[N_COL];

     enum EState {
         STATE_EXPLORING,
         STATE_DIFFUSING,
      } State;};

public:
   /* Class constructor. */
   EPuck_Environment_Classification();
 
   /* Class destructor. */
   virtual ~EPuck_Environment_Classification() {}

   virtual void Init(TConfigurationNode& t_node);
   virtual void ControlStep();
   virtual void Reset() {}
   void Explore();
   void Diffusing();   
   void Listening();
   void DecisionRule(int simulation_behaviour);
   void VoterModel();
   void DirectComparison();
   void MajorityRule();
   void Move();
   void TurnLeds();
   int  FindMaxOpinionReceived(int numberOpinionsReceived[], int actualOpinion);

   /* Unused (ma carlo l'aveva messa senza usarla quindi boh)*/
   virtual void Destroy() {}

   inline CollectedData& GetColData() {
      return collectedData;
   }
   inline SStateData& GetStateData() {
      return m_sStateData;
   }
   inline SimulationState& GetSimulationState(){
      return simulationParams;
   }
   inline std::vector<informationCollected>& GetReceivedOpinions() {
      return receivedOpinions;
   }
   inline Movement & GetMovement() {
      return movement;
   }
   inline Opinion & GetOpinion() {
      return opinion;
   }
   inline bool IsExploring() const {
      return m_sStateData.State == SStateData::STATE_EXPLORING;
   }
   inline bool IsDiffusing() const {
      return m_sStateData.State == SStateData::STATE_DIFFUSING;
   }
   //   inline std::string& GetID(){
   // return GetId();
   // }

private:
   CDegrees m_cAlpha;                         // OBST. AVOID.
   CCI_EPuckProximitySensor* m_pcProximity; // OBST. AVOID.
   Real m_fDelta;                             // OBST. AVOID.
   CRange<CRadians> m_cGoStraightAngleRange;  // OBST. AVOID.
   /* Sensors, actuators and RNG */
   CCI_LEDsActuator* m_pcLEDs; 
   CCI_DifferentialSteeringActuator* m_pcWheels;
   Real m_fWheelVelocity;
   CCI_RangeAndBearingActuator*  m_pcRABA;
   CCI_EPuckRangeAndBearingSensor* m_pcRABS;
   CRandom::CRNG* m_pcRNG;
   CRange<Real> bigRange;		       // Range used for RNG
   CRange<Real> zeroOne;		       // Range used for RNG
   /* Files */
   std::ofstream debugfile;
   /* Data structures for collect opinions in diffusing state */
   std::vector<informationCollected> receivedOpinions;  // Set of information collected in every diffusing states
   informationCollected IC;
   /* All others used variables */
   SStateData m_sStateData;
   SimulationState simulationParams;
   CollectedData collectedData;
   Opinion opinion;
   Movement movement;
   int initializationValues[N_COL];
   CColor red, blue, green;                    // Add here eventual additional color AGGIUNGERECOLORI
   int totalCounted, countedOfThisOpinion[N_COL];
};

#endif
