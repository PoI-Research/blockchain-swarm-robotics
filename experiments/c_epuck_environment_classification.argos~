<?xml version="1.0" ?>
<argos-configuration>

  <!-- ************************* -->
  <!-- * General configuration * -->
  <!-- ************************* -->
  <framework>
   
    <system threads="0" />

    <experiment length="0"
                ticks_per_second="10"
                random_seed="42" />

  </framework>

  <!-- *************** -->
  <!-- * Controllers * -->
  <!-- *************** -->
<controllers>

    <epuck_environment_classification_controller id="epc"
     library="build/controllers/epuck_environment_classification/libepuck_environment_classification.so">
     
      <actuators>
        <epuck_wheels implementation="default" />
        <leds implementation="default" medium="leds" />
        <epuck_range_and_bearing implementation="medium" medium="rab" range="0.8f" />
      </actuators>
      <sensors>
        <!--epuck_motor_ground implementation="rot_z_only" /-->
        <epuck_range_and_bearing implementation="medium" medium="rab" />
        <epuck_proximity implementation="default" show_rays="false" />
      </sensors>

      <params>
   
     	 <simulation_parameters g="100" 
   	          sigma="100"
		  turn="45"
                  lamda="100"
		  exitFlag="true"
		  decision_rule="3"
		  num_pack_saved="2"
	          percent_red="48"
		  percent_blue="52"/> <!-- Sigma and G must be inserted in seconds, not in ticks; 
							           1 = Voter model; 2 = Direct comparison; 3 = Majority Rule-->
 
      </params>
    </epuck_environment_classification_controller>
  </controllers>

  <loop_functions  library="build/loop_functions/environment_classification_loop_functions/libenvironment_classification_loop_functions.so"
                  label="environment_classification_loop_functions">

  <cells  number_of_red_cells="400"
          number_of_green_cells="0"
	  number_of_blue_cells="0"
	  using_percentage="true"
          percent_red="52"
	  percent_blue="48"
	  percent_green="0"
	  save_every_ticks="100" save_every_ticks_flag="false" save_every_run_flag="true" save_every_robot_flag="false" save_every_quality_flag="false" save_global_stat_flag="false"
	  radix="RADIX"
	  number_of_robots="100"
	  number_of_runs="1"
          number_of_qualities="2"
          r_0="1"
	  b_0="0"
	  g_0="65"
	  length_of_runs="R_M_L"
	  g="100"
	  sigma="10"
	  lamda="100"
	  turn="45"
	  decision_rule="3"
	  exit="true"/>

  </loop_functions>
  <!-- *********************** -->
  <!-- * Arena configuration * -->
  <!-- *********************** -->
  
  <!-- Real arena size is 10.3 * 5.15. We put 10.45 * 5.45 because of the walls but the real 
       usable arena for the robots is 10.3*5.-->
   <arena size="2.1, 2.1, 1" center="1,1,0">
     <floor id="floor"
           source="loop_functions"
           pixels_per_meter="50" />
    <!-- Place four boxes in a rectangle to delimit the arena -->
    <box id="wall_north" size="2 ,0.025,0.08" movable="false">
      <body position="1,2.0075,0" orientation="0,0,0" />
    </box>
    <box id="wall_south" size="2,0.025,0.08" movable="false">
      <body position="1,0.0075,0" orientation="0,0,0" />
    </box>
    <box id="wall_east" size="0.025,2,0.08" movable="false">
      <body position="2.0075,1,0" orientation="0,0,0" />
    </box>
    <box id="wall_west" size="0.025,2,0.08" movable="false">
      <body position="0.0075,1 ,0" orientation="0,0,0" />
    </box>

   <distribute>
      <position method="uniform" min="0.1,0.1,0" max="1.9 , 1.9, 0" />
      <orientation method="gaussian" mean="1,1,0 " std_dev="360,0,0 " />
      <entity quantity="100" max_trials="100">
        <e-puck id="ep" >
          <controller config="epc" />
        </e-puck>
      </entity>
    </distribute>


  </arena>

  <!-- ******************* -->
  <!-- * Physics engines * -->
  <!-- ******************* -->

  <physics_engines>
    <!--
        Use a 2D dynamics engine.
    -->
    <dynamics2d id="dyn2d" />
  </physics_engines>

  <!-- ********* -->
  <!-- * Media * -->
  <!-- ********* -->

 
  <media>
    <range_and_bearing id="rab" />
    <led id="leds" />
  </media>
  <!-- ****************** -->

  <!-- ****************** -->
  <!-- * Visualization * -->
  <!-- ****************** -->

  <visualization>
    <qt-opengl />
  </visualization>
  
</argos-configuration>
