#ifndef ENVIRONMENT_CLASSIFICATION_LOOP_FUNCTION_H
#define ENVIRONMENT_CLASSIFICATION_LOOP_FUNCTION_H
#define NUM_OF_CELLS     400
#define X_DIMENSION      2.0f
#define Y_DIMENSION 	 2.0f
#define CELL_DIMENSION	 0.1f
#define N_COL		 3
#include <argos3/core/simulator/loop_functions.h>
#include <argos3/core/simulator/entity/floor_entity.h>
#include <controllers/footbot_environment_classification/epuck_environment_classification.h>

using namespace argos;

class CEnvironmentClassificationLoopFunctions : public CLoopFunctions {
   
public:
    CEnvironmentClassificationLoopFunctions();
   virtual ~CEnvironmentClassificationLoopFunctions(){}

   virtual void Init(TConfigurationNode& t_node);
   virtual CColor GetFloorColor(const CVector2& c_pos_on_floor) {
       int x;
       int y;
       int i;
       Real xr,yr;
 
       if ((c_pos_on_floor.GetX() > Y_DIMENSION) || (c_pos_on_floor.GetY() > X_DIMENSION))
	  return CColor::WHITE;

       x = (int)(((Real)c_pos_on_floor.GetX())/(Real)CELL_DIMENSION);
       y = (int)(((Real)c_pos_on_floor.GetY())/(Real)CELL_DIMENSION);

       i=(int) (y*20 + x);
 
       switch ( grid[i])
       {	
	  case 0:
 				return CColor::RED;
 	  case 1: 
 		 		return CColor::GREEN;
 	  case 2:
 		 		return CColor::BLUE;
 	}

   }

   inline int GetGrid(int i) {
      return grid[i];
   }

 virtual void Reset();
 virtual bool IsExperimentFinished();
 virtual void PreStep();
 virtual void UpdateStatistics(EPuck_Environment_Classification::Opinion& opinion, EPuck_Environment_Classification::SStateData& sStateData);
 virtual void Destroy();
 virtual void RandomWalk(EPuck_Environment_Classification::Movement& movement);
 virtual void UpdateCount(EPuck_Environment_Classification::CollectedData& CollectedData,int cell, CVector2 cPos, EPuck_Environment_Classification::Opinion& opinion, EPuck_Environment_Classification::SStateData& sStateData, std::string& id, EPuck_Environment_Classification::SimulationState& simulationParam);
 virtual void MoveRobotsAwayFromArena(int opinionsToAssign[]);
 virtual void AssignNewStateAndPosition();
private:
    
    CRange<Real> zeroOne;
    CRange<Real> bigRange;
    CRange<Real> arenaSizeRangeX;
    CRange<Real> arenaSizeRangeY;
    CRandom::CRNG* m_pcRNG;

    CFloorEntity* m_pcFloor;
    /* Defined colours */
    CColor red;
    CColor blue;
    CColor green;

    int colorOfCell[N_COL], grid[NUM_OF_CELLS]; // Cells colors and grid with all the arenas cells
    bool m_bExperimentFinished; 		// Returned from IsExperimentFinished(), true->experiment finished
    std::ofstream everyTicksFile;		// Flag: write or not the situation(number of robots with opinions)every TOT ticks, true->write
    std::ofstream runsFile;			// Flag: write the result of every run, true->write
    std::ofstream globalStatFile;		// Flag: write global stats: time of exploring, diffusings,counted cells... true->write	
    std::ofstream everyQualityFile;		// Flag: every robot writes his quality and his opinion, after each exploration state
    std::ofstream oneRobotFile;			// Flag: just robot "ff0" (always present) writes his qualities after each exp. state

    /* Counters for the number of robots in each state for every colour */    
    int robotsInExplorationCounter[N_COL], robotsInDiffusionCounter[N_COL];
    int consensousReached;
    bool incorrectParameters;
    /* Percentage of coloured cells */
    Real percentageOfColors[N_COL];
    bool using_percentage;
    bool exitFlag;
    /* Variables used for catching statistics*/
    Real totalCountedCells, countedOpinions[N_COL], quality[N_COL], totalExploringTime, totalDiffusingTime[N_COL];
    int  numberOfExplorations[N_COL],numberOfDiffusions[N_COL];
    /* Parameters passed from configuration file */
    std::string passedRadix;
    int timeStep; // save statistics in everyTicksFile every <timeStep> ticks 
    int LAMDA,turn; // Parameters for the randomWalk: Lamda is the exponential mean and turn is the uniform parameter
    /* Flags for save or not the files */
    bool everyTicksFileFlag;
    bool runsFileFlag;
    bool qualityFileFlag;
    bool globalStatFileFlag;
    bool oneRobotFileFlag;
    int number_of_runs;
    int written_qualities;    // Number of qualities already written in the files
    int number_of_qualities;  // Total number of qualities that have to be written
    int max_time;
    /* Number of robots with i-th initial opinion */
    int initialOpinions[N_COL];
    /* Swarm Size */ 
    int n_robots;
    int g;
    int sigma;
    int decision_rule;
};


#endif
